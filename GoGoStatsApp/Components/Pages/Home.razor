@page "/"
@rendermode InteractiveServer
@using ChartJs.Blazor;
@using ChartJs.Blazor.Common
@using ChartJs.Blazor.PieChart
@using ChartJs.Blazor.Util
@using Newtonsoft.Json

<PageTitle>Home</PageTitle>

<h1>Hello, world!</h1>

<Chart Config="_config"></Chart>

<h1>Bye world!</h1>

@code {
    private PieConfig? _config;
    private List<PlayerInfo>? _players;

    protected override async Task OnInitializedAsync()
    {
        _config = new PieConfig
        {
            Options = new PieOptions
            {
                Responsive = true,
                Title = new OptionsTitle
                {
                    Display = true,
                    Text = "ChartJs.Blazor Pie Chart"
                }
            }
        };

        HttpClient httpClient = new HttpClient();
        var playersRes = await GetAsync(httpClient);

        var counters = new Dictionary<string, int>();

        foreach (PlayerInfo player in playersRes.players)
        {
            if (counters.ContainsKey(player.cls))
            {
                counters[player.cls]++;
            }
            else
            {
                counters[player.cls] = 1;
            }
        }

        foreach (string cls in counters.Keys)
        {
            _config.Data.Labels.Add(cls);
        }

        PieDataset<int> dataset = new PieDataset<int>(counters.Values);

        _config.Data.Datasets.Add(dataset);
    }

    public class PlayerInfo
    {
        public int id { get; set; }
        public string nickname { get; set; }
        public int lvl { get; set; }
        public string cls { get; set; }
        public int stage { get; set; }
        public int power { get; set; }
        public DateTime update_date { get; set; }
    }

    public class PlayersResponse
    {
        public List<PlayerInfo> players { get; set; }
    }


    public static async Task<PlayersResponse> GetAsync(HttpClient httpClient)
    {
        using HttpResponseMessage response = await httpClient.GetAsync("http://stream1.transcriptic.ru:5997/v1/players");

        response.EnsureSuccessStatusCode();

        var jsonString = await response.Content.ReadAsStringAsync();
        var result = JsonConvert.DeserializeObject<PlayersResponse>(jsonString);
        return result;
    }

}